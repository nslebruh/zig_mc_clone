.{
    .name = "zig_mc_clone",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{
        .zigmath = .{
            .url = "https://github.com/nslebruh/zigmath/archive/refs/tags/0.0.1.tar.gz",
            .hash = "12206001364ffc8809d07b84e64f84b117d2c7b4374d3f27e86538dd22ef1a2f5d6f",
        },
        .@"mach-glfw" = .{
        .url = "https://github.com/nslebruh/mach-glfw/archive/refs/tags/0.0.1.tar.gz",
        .hash = "12204522059d382f5d05099b60ec4d85c1b1917d22b8157ab4947ecac0dc5bb3d8fe",
        },
        .zgl = .{
                .url = "https://github.com/nslebruh/zgl/archive/refs/tags/0.0.0.3.tar.gz",
                .hash = "1220fd36054b472ce6bc1c0b644f6542ff95c123f7d8db961543c88e5362fabfe0c6",
        },
    },
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "build.zig",
        "build.zig.zon",
        "src",
        // For example...
        //"build.zig",
        //"build.zig.zon",
        //"src",
        //"LICENSE",
        //"README.md",
    },
}
